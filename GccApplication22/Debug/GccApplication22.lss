
GccApplication22.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000d4  00000148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000148  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  00000814  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  000008ab  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000008da  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000001e7  00000000  00000000  00000912  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000fd  00000000  00000000  00000af9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001d3  00000000  00000000  00000bf6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00000dcc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000ca  00000000  00000000  00000e20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000068  00000000  00000000  00000eea  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00000f52  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 4f 00 	call	0x9e	; 0x9e <main>
  64:	0c 94 68 00 	jmp	0xd0	; 0xd0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <_Z5Pausei>:
#include <avr/io.h>
#include <util/delay.h>

void Pause(int ms)
{
	PORTB = 0xFF;
  6c:	2f ef       	ldi	r18, 0xFF	; 255
  6e:	28 bb       	out	0x18, r18	; 24
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
  70:	01 97       	sbiw	r24, 0x01	; 1
  72:	f1 f7       	brne	.-4      	; 0x70 <_Z5Pausei+0x4>
  74:	08 95       	ret

00000076 <_Z1Pv>:
	_delay_loop_2 (ms);
}

void P(void)
{
	PORTB = 0;
  76:	18 ba       	out	0x18, r1	; 24
  78:	82 e3       	ldi	r24, 0x32	; 50
  7a:	90 e0       	ldi	r25, 0x00	; 0
  7c:	01 97       	sbiw	r24, 0x01	; 1
  7e:	f1 f7       	brne	.-4      	; 0x7c <_Z1Pv+0x6>
	_delay_loop_2 (50);
	Pause(50);
  80:	82 e3       	ldi	r24, 0x32	; 50
  82:	90 e0       	ldi	r25, 0x00	; 0
  84:	0e 94 36 00 	call	0x6c	; 0x6c <_Z5Pausei>
  88:	08 95       	ret

0000008a <_Z1Dv>:
}

void D(void)
{
	PORTB = 0;
  8a:	18 ba       	out	0x18, r1	; 24
  8c:	88 ec       	ldi	r24, 0xC8	; 200
  8e:	90 e0       	ldi	r25, 0x00	; 0
  90:	01 97       	sbiw	r24, 0x01	; 1
  92:	f1 f7       	brne	.-4      	; 0x90 <_Z1Dv+0x6>
	_delay_loop_2 (200);
	Pause(50);
  94:	82 e3       	ldi	r24, 0x32	; 50
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	0e 94 36 00 	call	0x6c	; 0x6c <_Z5Pausei>
  9c:	08 95       	ret

0000009e <main>:
}

int main(void)
{
	DDRB = 0xFF;
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	87 bb       	out	0x17, r24	; 23
	while(1)
	{
		P(); P(); P(); //...
  a2:	0e 94 3b 00 	call	0x76	; 0x76 <_Z1Pv>
  a6:	0e 94 3b 00 	call	0x76	; 0x76 <_Z1Pv>
  aa:	0e 94 3b 00 	call	0x76	; 0x76 <_Z1Pv>
		D(); D(); D(); //---
  ae:	0e 94 45 00 	call	0x8a	; 0x8a <_Z1Dv>
  b2:	0e 94 45 00 	call	0x8a	; 0x8a <_Z1Dv>
  b6:	0e 94 45 00 	call	0x8a	; 0x8a <_Z1Dv>
		P(); P(); P(); //...
  ba:	0e 94 3b 00 	call	0x76	; 0x76 <_Z1Pv>
  be:	0e 94 3b 00 	call	0x76	; 0x76 <_Z1Pv>
  c2:	0e 94 3b 00 	call	0x76	; 0x76 <_Z1Pv>
		Pause(1000);
  c6:	88 ee       	ldi	r24, 0xE8	; 232
  c8:	93 e0       	ldi	r25, 0x03	; 3
  ca:	0e 94 36 00 	call	0x6c	; 0x6c <_Z5Pausei>
  ce:	e9 cf       	rjmp	.-46     	; 0xa2 <main+0x4>

000000d0 <_exit>:
  d0:	f8 94       	cli

000000d2 <__stop_program>:
  d2:	ff cf       	rjmp	.-2      	; 0xd2 <__stop_program>
